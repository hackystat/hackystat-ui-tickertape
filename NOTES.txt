Telemetry Language Migration Status and Future Directions.

9/4/07

* Next steps:
  - remove warnings.
  - get unit tests to pass.
  - move day/week/month to utilities. 

* All the unit tests are in JUnit 3 syntax. Should upgrade. 

* It looks like the Filter Functions are not "stock" telemetry, but are loaded as definitions.

* There are 32 warnings I need to go through and remove.  Weird that they don't show up in Eclipse.

9/3/07

Currently, I've ported the Telemetry stuff over to V8 and it compiles (not
gracefully, though, because I had to disable the -Werror option in the Ant
compile task.)

Some general things to remember about the current state:

* JDOM is on the path.  It must be eliminated. 

* Must restore -Werror to compile task eventually.

* ServerProperties is used in a few places. Not sure how to make the V8
  ServerProperties available to this code without making it a
  singleton. Maybe as I understand it better I will know what "instances"
  to make when initializing the service.

* Cedric had to make two kinds of Telemetry Definition Managers---a Persistent and a non-Persistent version.  Looks like I can reduce this to a single kind. 

* Not sure if I want to keep the "shareScope" abstraction (although why not?) 

* For definitions, I need to change things to read the definitions using Jaxb (not JDOM) from the xml/defaults directory.  And there will be no writing!

* Need to edit all the package.html files to refer to Telemetry, not DailyProjectData.

* Then there's the hooking up of the internal stuff:
  - Day, Week, Month
  - Interval, DayInterval, WeekInterval, MonthInterval
  - Time Period
That stuff may not need much, if any, changing.

 - Project, ProjectManager
 - User, UserManager
 - ServerProperties
This stuff needs complete reimplementation. 

* I'm a little bummed at the current package structure.  It seems to me that we really need:

org.telemetry.service.client
                     .resource
                     .server
                     .test
                     
and

org.telemetry.analyzer.configuration
                      .evaluator
                      .function
                      .language
                      .model
                      .reducer
                      .util

Maybe that wouldn't be excessively hard to do, since we're moving all packages down a level. 

Actually, it wasn't, and I did it. 

* So, how to start?  Where to get traction? 

(1) Do the repackaging to at least get the service stuff split away from the analyzer. Otherwise, this thing will be totally difficult to understand. 
 -- DONE

(3) Do a pass over the JavaDocs and improve them. This will be a good way to load the code into memory and get a better sense for how to proceed. 

(2) Move Day/Week/Month and Interval stuff to Hackystat-Utilities. 

(4) Find the "manager" instances in each package, and understand them.  Create an instance of them in the Server as needed.  Eliminate singletons when possible. 

(5) Replace the Project[Manager], User[Manager], and ServerProperties references with V8 references. Delete the old code. At that point, the entire util/ directory can go.

(6) Define the default Telemetry definitions and get them to load. 

(7) Clean up code.  Eliminate all warnings, get whatever JUnit tests are still appropriate to pass. 

(8) Test to see that the system works. 





